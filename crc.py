#!/bin/python3
import crcmod


crcTwoBitCorrectionArray =[[-1 , 0xa , 0x1e , 0x36 , 0x66 , 0xc6 , 0x186 , 0x306 , 0x606 , 0xc06 , 0x1806 , 0x3006 , 0x6006 , 0xc006 , 0x3 , 0xc ],
[ 0xa , -1 , 0x14 , 0x3c , 0x6c , 0xcc , 0x18c , 0x30c , 0x60c , 0xc0c , 0x180c , 0x300c , 0x600c , 0xc00c , 0x9 , 0x6 ],
[ 0x1e , 0x14 , -1 , 0x28 , 0x78 , 0xd8 , 0x198 , 0x318 , 0x618 , 0xc18 , 0x1818 , 0x3018 , 0x6018 , 0xc018 , 0x1d , 0x12 ],
[ 0x36 , 0x3c , 0x28 , -1 , 0x50 , 0xf0 , 0x1b0 , 0x330 , 0x630 , 0xc30 , 0x1830 , 0x3030 , 0x6030 , 0xc030 , 0x35 , 0x3a ],
[ 0x66 , 0x6c , 0x78 , 0x50 , -1 , 0xa0 , 0x1e0 , 0x360 , 0x660 , 0xc60 , 0x1860 , 0x3060 , 0x6060 , 0xc060 , 0x65 , 0x6a ],
[ 0xc6 , 0xcc , 0xd8 , 0xf0 , 0xa0 , -1 , 0x140 , 0x3c0 , 0x6c0 , 0xcc0 , 0x18c0 , 0x30c0 , 0x60c0 , 0xc0c0 , 0xc5 , 0xca ],
[ 0x186 , 0x18c , 0x198 , 0x1b0 , 0x1e0 , 0x140 , -1 , 0x280 , 0x780 , 0xd80 , 0x1980 , 0x3180 , 0x6180 , 0xc180 , 0x185 , 0x18a ],
[ 0x306 , 0x30c , 0x318 , 0x330 , 0x360 , 0x3c0 , 0x280 , -1 , 0x500 , 0xf00 , 0x1b00 , 0x3300 , 0x6300 , 0xc300 , 0x305 , 0x30a ],
[ 0x606 , 0x60c , 0x618 , 0x630 , 0x660 , 0x6c0 , 0x780 , 0x500 , -1 , 0xa00 , 0x1e00 , 0x3600 , 0x6600 , 0xc600 , 0x605 , 0x60a ],
[ 0xc06 , 0xc0c , 0xc18 , 0xc30 , 0xc60 , 0xcc0 , 0xd80 , 0xf00 , 0xa00 , -1 , 0x1400 , 0x3c00 , 0x6c00 , 0xcc00 , 0xc05 , 0xc0a ],
[ 0x1806 , 0x180c , 0x1818 , 0x1830 , 0x1860 , 0x18c0 , 0x1980 , 0x1b00 , 0x1e00 , 0x1400 , -1 , 0x2800 , 0x7800 , 0xd800 , 0x1805 , 0x180a ],
[ 0x3006 , 0x300c , 0x3018 , 0x3030 , 0x3060 , 0x30c0 , 0x3180 , 0x3300 , 0x3600 , 0x3c00 , 0x2800 , -1 , 0x5000 , 0xf000 , 0x3005 , 0x300a ],
[ 0x6006 , 0x600c , 0x6018 , 0x6030 , 0x6060 , 0x60c0 , 0x6180 , 0x6300 , 0x6600 , 0x6c00 , 0x7800 , 0x5000 , -1 , 0xa000 , 0x6005 , 0x600a ],
[ 0xc006 , 0xc00c , 0xc018 , 0xc030 , 0xc060 , 0xc0c0 , 0xc180 , 0xc300 , 0xc600 , 0xcc00 , 0xd800 , 0xf000 , 0xa000 , -1 , 0xc005 , 0xc00a ],
[ 0x3 , 0x9 , 0x1d , 0x35 , 0x65 , 0xc5 , 0x185 , 0x305 , 0x605 , 0xc05 , 0x1805 , 0x3005 , 0x6005 , 0xc005 , -1 , 0xf ],
[ 0xc , 0x6 , 0x12 , 0x3a , 0x6a , 0xca , 0x18a , 0x30a , 0x60a , 0xc0a , 0x180a , 0x300a , 0x600a , 0xc00a , 0xf , -1 ]]

crcSingleBitCorrectionArray = [0b1000000000000101,
    0b1000000000001111,0b1000000000011011,
    0b1000000000110011,0b1000000001100011,
    0b1000000011000011,0b1000000110000011,
    0b1000001100000011,0b1000011000000011,
    0b1000110000000011,0b1001100000000011,
    0b1011000000000011,0b1110000000000011,
    0b100000000000011,0b1000000000000110,
    0b1000000000001001]

crc16 = crcmod.mkCrcFun(0x18005,rev = False, initCrc=0xFFFF, xorOut=0x0000)

#encode data, used with library
#input bytearray
#return bytearray(2 bytes of data + 2 byes of crc)
def Encode(data):
    if(len(data) > 2):
        return -1
    val = int(crc16(data))
    ret = data + bytearray(val.to_bytes(2, 'big'))
    #print("ret value:", hex(int.from_bytes(ret, 'big')))
    return ret

#decode data with use of library
#return in list data if incomming crc == calcuated crc
#return list if incomming crc != caculated crc
#         [False, crc calculated, crc incomming, data]
def Decode(data):
    if(len(data)> 4):
        return -1
    high = data[len(data)-2]
    low =  data[len(data)-1]
    crcIn = ((high << 8) + low)
   
    crcCalculated = int(crc16(bytearray((data[0], data[1]))))
   
    if(crcIn == crcCalculated):
        return [data]
    else:
        return [False, crcCalculated, crcIn, data]

#correct data if wrong
#return corrected data or False if it's impossible to correct
def CorrectData(crcCalculated, crcIncomming, data):
    intData = int.from_bytes(data, 'big')
   
    Cor = crcCalculated ^ crcIncomming
    indexLoc=0
    for i in crcSingleBitCorrectionArray:
        if i == Cor:
           
            intData = intData ^ (1 << indexLoc+16)
            bytesData = intData.to_bytes(4, 'big') 
            res = Decode(bytesData)
            if res[0] != False:
                
                return bytesData
        indexLoc += 1
    foundLoc = [0 for x in range(2)]
    indexLoc = 0
    i=0
    j=0
    dataOld = intData
    for i in range(0, 16):
        for j in range(0, 16):
            if crcTwoBitCorrectionArray[i][j] == Cor:
                foundLoc[0] = i
                foundLoc[1] = j
                break
    
    
    #if(foundLoc[0][0] != foundLoc[1][1] or foundLoc[0][1] != foundLoc[1][0]):   
    #    print(foundLoc, '\n')
    
    intData = (dataOld ^ (1 << 16+foundLoc[0]))
    intData = (intData ^ (1 << 16+foundLoc[1]))

    bytesData = intData.to_bytes(4, 'big')
    res =  Decode(bytesData)
    
    if res[0] != False:
        return bytesData
    else:
        return False